#!/usr/bin/env bash

# Build a portable AppImage starting from a clean system. Other examples at:
# https://github.com/probonopd/AppImages/blob/master/recipes/scribus/Recipe

# NOTES:
#
# 1) IT IS NOT SAFE TO RUN THIS RECIPE ON A PERSISTENT FILESYSTEM! Use either:
#      * A chroot into a Live ISO, squashfs or Docker Image.
#      * Or, a virtual machine on a dedicated build server (e.g. Travis CI)
#    DO NOT RUN THE RECIPE ON A NORMAL COMPUTER OUTSIDE OF A TEMPORARY CHROOT!
#

set -e # Halt on errors
set -x # Be verbose

##########################################################################
# CHECK SYSTEM
##########################################################################

# This script should be run inside CentOS 6 if possible,
# or CentOS 7 if 6 is unavailable for your architecture.
if [ "$(grep "Debian GNU/Linux 9 (stretch)" /etc/*release*)" ]; then
  OS="Debian Stretch"
else
  echo "${0}: Warning: Not running on Debian Stretch!" >&2
fi

##########################################################################
# GET DEPENDENCIES
##########################################################################
# only prepare system if not already prepared (custom docker image)
if [ ! -f /etc/system-prepared ]; then
./init.sh
fi

##########################################################################
# BUILD QTQUICKVCP
##########################################################################
export PATH="/qt5/bin:$PATH"
export LD_LIBRARY_PATH="/qt5/lib:$LD_LIBRARY_PATH"
export QT_PLUGIN_PATH="/qt5/plugins"
export QML_IMPORT_PATH="/qt5/qml"
export QML2_IMPORT_PATH="/qt5/qml"
export QT_QPA_PLATFORM_PLUGIN_PATH="/qt5/plugins/platforms"
export QT_TRANSLATIONS_PATH="/qt5/translations"
export QT_INSTALL_PREFIX="/qt5"

export ARCH="x86_64"
export QML_SOURCES_PATHS="${PWD}/src ${PWD}/apps"
export LINUXDEPLOY_BIN=/linuxdeploy/squashfs-root/usr/bin/linuxdeploy
export LINUXDEPLOY_PLUGIN_QT_BIN=/linuxdeploy/squashfs-root/usr/bin/linuxdeploy-plugin-qt
export APP_NAME="machinekit-client"

#sudo chmod -R a+rw ${QT_INSTALL_PREFIX}

find /linuxdeploy
ls -l ${LINUXDEPLOY_BIN}
${LINUXDEPLOY_BIN} --help


mkdir -p build.release
cd build.release
export APP_DIR=${PWD}/AppDir

qmake QMLPLUGINDUMP=0 CONFIG+=release PREFIX=/usr -r ..
make -j$((`nproc` + 1))
# make docs
INSTALL_ROOT=${APP_DIR} make install VERBOSE=1
# make install_docs

# compress QtQuick module
zipfile="QtQuickVcp.tar.gz"
mkdir qml
mkdir lib
cp -r ${APP_DIR}/${QML_IMPORT_PATH}/Machinekit qml/Machinekit
cp ${APP_DIR}/${QT_INSTALL_PREFIX}/lib/libmachinetalk* lib/
tar -zcf $zipfile qml lib translations
# allow access to archive from outside the chroot
chmod a+rwx $zipfile
chmod a+rwx .
ls -lh $zipfile
rm -r qml
rm -r lib


export QML_MODULES_PATHS=${APP_DIR}/${QML_IMPORT_PATH}
export LD_LIBRARY_PATH="${APP_DIR}/${QT_INSTALL_PREFIX}/lib:$LD_LIBRARY_PATH"
echo "Building AppImage for ${APP_NAME}"
${LINUXDEPLOY_BIN} --app-name ${APP_NAME} --appdir ${APP_DIR} --init-appdir
${LINUXDEPLOY_PLUGIN_QT_BIN} --appdir ${APP_DIR}
${LINUXDEPLOY_BIN} --app-name ${APP_NAME} --appdir ${APP_DIR} --output appimage

# prepare variables
appimage=( ${PWD}/MachinekitClient*.AppImage )

# cp ${QT_TRANSLATIONS_PATH}/*_de.qm translations/
# cp ${QT_TRANSLATIONS_PATH}/*_ru.qm translations/

# back to home folder
cd ../

# cleanup plugins.qmltypes files here, since they have been created with sudo
#sudo chown -R `whoami` ./build.release

##########################################################################
# PACKAGE INTO APPIMAGE WITH APPIMAGEKIT
##########################################################################

# allow access to AppImage from outside the chroot
chmod a+rwx "$appimage"
parent_dir="$(dirname "$appimage")"
while [ "$(dirname "$parent_dir")" != "$parent_dir" ]; do
  [ "$parent_dir" == "/" ] && break
  chmod a+rwx "$parent_dir"
  parent_dir="$(dirname "$parent_dir")"
done

ls -lh "$appimage"
